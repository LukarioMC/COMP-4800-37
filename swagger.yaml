# How to write OpenAPI docs: https://swagger.io/docs/specification/basic-structure/
openapi: 3.0.0

info:
  title: 37 Fact API
  description: API for facts about the number 37.
  version: 1.0.0

servers:
  - url: "http://localhost:8000/"
    description: "Local server"

components:
  schemas:
    Fact:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        note:
          type: string
        posting_date:
          type: string
        discovery_date:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
    Tag:
      type: object
      properties:
        factoid_id:
          type: integer
        category_id:
          type: integer
    Attachment:
      type: object
      properties:
        id:
          type: integer
        link:
          type: string
        type:
          type: string
    FactReport:
      type: object
      properties:
        fact:
          $ref: '#/components/schemas/FactJSON'
        issue:
          type: string
    FactJSON:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        is_primary:
          type: boolean
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          description: 'An error message.'
          

paths:
  /api/fact:
    get:
      summary: Returns a list of facts that have been optionally filtered by tags and text content. Optionally paginated.
      parameters:
        - name: tag
          in: query
          required: false
          description: A category to filter facts by.
          schema:
            type: string
        - name: searchText
          in: query
          required: false
          description: Text to look for in facts.
          schema:
            type: string
        - name: pageNum
          in: query
          required: false
          description: Requested fact page number. Must be > 0.
          schema:
            type: integer
        - name: pageSize
          in: query
          required: false
          description: Number of facts to be returned. Must be > 0.
          schema:
            type: integer
      responses:
        '200':
          description: A list of facts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fact'
        '400':
          description: 'Error if page number and size are less than 0.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Server error.

    post:
      summary: 
      requestBody:
        description: 
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  description: A list of tag names.
                  type: array
                  items:
                    type: string
  /api/fact/{factID}:
    get:
      summary: Returns a fact by ID.
      parameters:
        - name: factID
          in: path
          description: An ID for a fact.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A fact with the corresponding ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fact'
        '404':
          description: Fact not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      summary: 
      requestBody:
        description: 
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  description: A list of tag names.
                  type: array
                  items:
                    type: string

  /api/report:
    post:
      summary: Sends an email report to the admin with information about the selected fact. The email functionality is configured with host, port, and sender email/password.
      description: Sends an email report to the admin with information about the selected fact. Consists of from (sender), to (receiver), subject, and text (report content). 
      requestBody:
        description: Consists of from (sender), to (receiver), subject, and text (report content). Text contains submitter ID, fact ID, fact content, the content the user has typed into the report, and a link to the dashboard.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FactReport'
        required: true
      responses:
        '200':
          description: Email successfully sent with all the required information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FactReport'
        '500':
          description: Server error.
  /api/tags:
    get:
      summary: Returns a list of all categories.
      responses:
        '200':
          description: A list of all fact categories sorted by whether they are primary.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /api/tag:
    put:
      summary: Add a new category for tags in the database.
      requestBody:
        description: Object with category name and optional isPrimary flag.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagName:
                  type: string
                isPrimary:
                  type: boolean
      responses:
        '201':
          description: Tag successfully added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
        '400':
          description: Invalid arguments.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string



